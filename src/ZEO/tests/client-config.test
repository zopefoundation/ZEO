ZEO Client Configuration
========================

Here we'll describe (and test) the various ZEO Client configuration
options.  To facilitate this, we'l start a server that our client can
connect to:

    >>> addr, _ = start_server(blob_dir='server-blobs')

The simplest client configuration specified a server address:

    >>> import ZODB.config
    >>> storage = ZODB.config.storageFromString("""
    ... <zeoclient>
    ...     server %s:%s
    ... </zeoclient>
    ... """ % addr)

    >>> storage.getName(), storage.__class__.__name__
    ... # doctest: +ELLIPSIS
    ("[('127.0.0.1', ...)] (connected)", 'ClientStorage')

    >>> storage.blob_dir
    >>> storage._storage
    '1'
    >>> storage._cache.maxsize
    20971520
    >>> storage._cache.path
    >>> storage._is_read_only
    False
    >>> storage._read_only_fallback
    False
    >>> storage._blob_cache_size

    >>> storage.close()

    >>> storage = ZODB.config.storageFromString("""
    ... <zeoclient>
    ...     server %s:%s
    ...     blob-dir blobs
    ...     storage 2
    ...     cache-size 100
    ...     name bob
    ...     client cache
    ...     read-only true
    ...     drop-cache-rather-verify true
    ...     blob-cache-size 1000MB
    ...     blob-cache-size-check 10
    ...     wait false
    ... </zeoclient>
    ... """ % addr)


    >>> storage.getName(), storage.__class__.__name__
    ('bob (disconnected)', 'ClientStorage')

    >>> storage.blob_dir
    'blobs'
    >>> storage._storage
    '2'
    >>> storage._cache.maxsize
    100
    >>> import os
    >>> storage._cache.path == os.path.abspath('cache-2.zec')
    True

    >>> storage._is_read_only
    True
    >>> storage._read_only_fallback
    False
    >>> storage._blob_cache_size
    1048576000

    >>> print(storage._blob_cache_size_check)
    104857600

In isolated runs, the ``close`` below failed with a timeout.
Set up a log handler to get at the associated log message.
Note that we are interested only in this specific log message
(from `ZEO.asyncio.client.ClientIO.close_co`).
Occasionally (when the server response for the access to the
non existing storage `2` is processed sufficiently fast),
there will we other error log entries; we ignore them.

Note: ``InstalledHandler`` changes the logger's level.
Therefore, we cannot set ``level`` to ``ERROR`` even though
we are only interested in error messages for this test (it would discard
other log messages important for the timeout analysis).
Instead, we initially request the ``DEBUG`` level
and later set the handler's level to ``ERROR``.
The main logfile might get unusual entries as a side effect.

    >>> import logging
    >>> from zope.testing.loggingsupport import InstalledHandler
    >>> handler = InstalledHandler("ZEO.asyncio.client", level=logging.DEBUG)
    >>> handler.setLevel(logging.ERROR)

    >>> storage.close()

Check log records

    >>> def check_log_records(records):
    ...     records = [r.message for r in records]
    ...     return any("as a bug" in r for r in records) and records or []
    >>> check_log_records(handler.records)
    []

Cleanup

    >>> handler.uninstall()
